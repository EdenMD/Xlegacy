name: Run Xlegacy Telegram Bot

on:
  # This workflow can be triggered manually from the GitHub Actions tab
  workflow_dispatch:
    inputs:
      duration_minutes:
        description: 'How long to run the bot (in minutes)? Max 60 minutes.'
        required: false
        default: '60' # Default duration if not specified

jobs:
  run_telegram_bot:
    runs-on: ubuntu-latest # Use the latest Ubuntu Linux runner
    
    # Set a timeout for the entire job.
    # The bot will run for this duration and then the job will be cancelled.
    timeout-minutes: ${{ github.event.inputs.duration_minutes || 60 }} 

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Action to check out your repository code

    - name: Set up Node.js
      uses: actions/setup-node@v4 # Action to set up Node.js environment
      with:
        node-version: '20' # Recommend using Node.js 20 for modern applications

    - name: Install dependencies
      # This assumes you have a package.json file with all your dependencies listed.
      # If not, 'npm install' might not install all modules, relying on ensureModule.
      # It's highly recommended to have a package.json.
      run: npm install

    - name: Run Telegram Bot
      # Set environment variables from GitHub Secrets
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        MEGA_EMAIL: ${{ secrets.MEGA_EMAIL }}
        MEGA_PASS: ${{ secrets.MEGA_PASS }}
      run: node bot.js # Command to start your bot script
      
    - name: Display end message (if job completes before timeout)
      # This step will only run if the 'node bot.js' command exits naturally.
      # If the job times out, this step won't be reached.
      if: success() || failure()
      run: echo "Bot job completed or timed out after the specified duration."
